#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
from pathlib import Path
from datetime import datetime
import argparse


def count_files_in_section(section_path: Path) -> dict:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    if not section_path.exists():
        return {"files": 0, "folders": 0, "empty_folders": 0}
    
    files = 0
    folders = 0
    empty_folders = 0
    
    for item in section_path.rglob('*'):
        if item.is_file():
            files += 1
        elif item.is_dir():
            folders += 1
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –ø–∞–ø–∫–∞
            if not any(item.iterdir()):
                empty_folders += 1
    
    return {"files": files, "folders": folders, "empty_folders": empty_folders}


def analyze_project_completeness(project_path: Path) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    sections = [
        "00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "01_–ò–Ω–∏—Ü–∏–∞—Ü–∏—è_–∏_–∫–æ–Ω—Ç–µ–∫—Å—Ç", 
        "02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è",
        "03_–î–∞–Ω–Ω—ã–µ",
        "04_–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "05_–†–µ—à–µ–Ω–∏–µ_–∏_–¥–∏–∑–∞–π–Ω",
        "06_–ü–æ—Å—Ç–∞–≤–∫–∞_–∏_–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
        "07_–ö–∞—á–µ—Å—Ç–≤–æ_–∏_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "08_–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    ]
    
    analysis = {}
    total_files = 0
    total_empty_folders = 0
    
    for section in sections:
        section_path = project_path / section
        stats = count_files_in_section(section_path)
        analysis[section] = stats
        total_files += stats["files"]
        total_empty_folders += stats["empty_folders"]
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if total_files > 50:
        completeness = "–í—ã—Å–æ–∫–∞—è"
    elif total_files > 25:
        completeness = "–°—Ä–µ–¥–Ω—è—è"
    else:
        completeness = "–ù–∏–∑–∫–∞—è"
    
    return {
        "sections": analysis,
        "total_files": total_files,
        "total_empty_folders": total_empty_folders,
        "completeness": completeness
    }


def generate_report(project_path: Path) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_name = project_path.name
    analysis = analyze_project_completeness(project_path)
    
    report = f"""# üìä –û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M')}  
**–û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:** {analysis['completeness']}  
**–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {analysis['total_files']}  
**–ü—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫:** {analysis['total_empty_folders']}

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º

| –†–∞–∑–¥–µ–ª | –§–∞–π–ª–æ–≤ | –ü–∞–ø–æ–∫ | –ü—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫ | –°—Ç–∞—Ç—É—Å |
|--------|---------|-------|--------------|---------|"""

    for section, stats in analysis['sections'].items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ–∫—Ü–∏–∏
        if stats['files'] == 0:
            status = "‚ùå –ù–µ –Ω–∞—á–∞—Ç"
        elif stats['empty_folders'] > 0:
            status = "‚ö†Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        else:
            status = "‚úÖ –ì–æ—Ç–æ–≤"
        
        report += f"\n| {section} | {stats['files']} | {stats['folders']} | {stats['empty_folders']} | {status} |"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += f"""

## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"""

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    priority_sections = []
    for section, stats in analysis['sections'].items():
        if stats['files'] < 2:  # –ú–∞–ª–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
            priority_sections.append(section)
    
    if priority_sections:
        report += "\n- üî• **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**"
        for section in priority_sections[:3]:  # –¢–æ–ø 3
            report += f"\n  - {section}"
    
    if analysis['total_empty_folders'] > 0:
        report += f"\n- üìÅ **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ {analysis['total_empty_folders']} –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫**"
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if analysis['completeness'] == "–ù–∏–∑–∫–∞—è":
        estimate = "3-5 –¥–Ω–µ–π"
    elif analysis['completeness'] == "–°—Ä–µ–¥–Ω—è—è":
        estimate = "1-2 –¥–Ω—è"
    else:
        estimate = "–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ"
    
    report += f"""

### –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {estimate}

## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–°–µ–≥–æ–¥–Ω—è:** –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±—Ä–∏—Ñ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
2. **–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:** –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã  
3. **–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ:** –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: `python scripts/generate_status_report.py`*
"""
    
    return report


def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--project', type=str, help='–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É')
    parser.add_argument('--all', action='store_true', help='–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º')
    
    args = parser.parse_args()
    
    if args.project:
        project_path = Path(args.project)
        if not project_path.exists():
            print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
            return
        
        report = generate_report(project_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = project_path / f"STATUS_REPORT_{datetime.now().strftime('%Y%m%d')}.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print("\n" + "="*50)
        print(report)
        
    elif args.all:
        # –ù–∞–π—Ç–∏ –≤—Å–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
        projects = []
        for item in Path('.').iterdir():
            if item.is_dir() and not item.name.startswith('.') and not item.name == 'scripts':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç
                if (item / '00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ').exists():
                    projects.append(item)
        
        if not projects:
            print("‚ùå –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤:")
        
        for project in projects:
            analysis = analyze_project_completeness(project)
            print(f"  üìÅ {project.name}: {analysis['completeness']} –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, {analysis['total_files']} —Ñ–∞–π–ª–æ–≤")
    
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ --project –∏–ª–∏ --all")


if __name__ == '__main__':
    main()
