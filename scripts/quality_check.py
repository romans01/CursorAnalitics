#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import re
from pathlib import Path
from datetime import datetime, timedelta
import argparse


class QualityChecker:
    def __init__(self, project_path: Path):
        self.project_path = project_path
        self.issues = []
        self.warnings = []
        self.suggestions = []
    
    def check_required_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            '00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ/–±—Ä–∏—Ñ.md',
            '00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ/–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã.md',
            '02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/–≤–∏–¥–µ–Ω–∏–µ.md',
            '02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/–∫—Ä–∏—Ç–µ—Ä–∏–∏_–ø—Ä–∏–µ–º–∫–∏.md',
            '07_–ö–∞—á–µ—Å—Ç–≤–æ_–∏_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–ø–ª–∞–Ω_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.md',
            'README.md'
        ]
        
        for file_path in required_files:
            full_path = self.project_path / file_path
            if not full_path.exists():
                self.issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            elif full_path.stat().st_size < 100:  # –ú–µ–Ω—å—à–µ 100 –±–∞–π—Ç
                self.warnings.append(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {file_path}")
    
    def check_file_freshness(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤"""
        week_ago = datetime.now() - timedelta(days=7)
        month_ago = datetime.now() - timedelta(days=30)
        
        important_files = [
            '00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–æ—Ä–æ–∂–Ω–∞—è_–∫–∞—Ä—Ç–∞.md',
            '02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/BRD_–±–∏–∑–Ω–µ—Å_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.md',
            '02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/SRS_—Å–∏—Å—Ç–µ–º–Ω—ã–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.md'
        ]
        
        for file_path in important_files:
            full_path = self.project_path / file_path
            if full_path.exists():
                modified_time = datetime.fromtimestamp(full_path.stat().st_mtime)
                if modified_time < month_ago:
                    self.warnings.append(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞: {file_path}")
                elif modified_time < week_ago:
                    self.suggestions.append(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å: {file_path}")
    
    def check_content_quality(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∏—Ñ–∞
        brief_path = self.project_path / '00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ/–±—Ä–∏—Ñ.md'
        if brief_path.exists():
            content = brief_path.read_text(encoding='utf-8')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if '[–æ–ø–∏—Å–∞–Ω–∏–µ]' in content or '[TODO]' in content:
                self.issues.append("‚ùå –ë—Ä–∏—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã")
            
            if len(content) < 500:
                self.warnings.append("‚ö†Ô∏è –ë—Ä–∏—Ñ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keywords = ['—Ü–µ–ª—å', '–ø—Ä–æ–±–ª–µ–º–∞', '–º–µ—Ç—Ä–∏–∫–∏', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']
            missing_keywords = [kw for kw in keywords if kw.lower() not in content.lower()]
            if missing_keywords:
                self.suggestions.append(f"üí° –í –±—Ä–∏—Ñ–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å: {', '.join(missing_keywords)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π
        stories_path = self.project_path / '02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ_–∏—Å—Ç–æ—Ä–∏–∏'
        if stories_path.exists():
            story_files = list(stories_path.glob('*.md'))
            if len(story_files) < 3:
                self.warnings.append("‚ö†Ô∏è –ú–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π (–º–µ–Ω–µ–µ 3)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç User Stories
            for story_file in story_files:
                if story_file.name == 'README.md':
                    continue
                content = story_file.read_text(encoding='utf-8')
                if '–ö–∞–∫' not in content or '—è —Ö–æ—á—É' not in content or '—á—Ç–æ–±—ã' not in content:
                    self.warnings.append(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User Story: {story_file.name}")
    
    def check_data_documentation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        data_section = self.project_path / '03_–î–∞–Ω–Ω—ã–µ'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        sources_file = data_section / '–∏—Å—Ç–æ—á–Ω–∏–∫–∏_–¥–∞–Ω–Ω—ã—Ö.md'
        if not sources_file.exists() or sources_file.stat().st_size < 200:
            self.issues.append("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
        dict_folder = data_section / '—Å–ª–æ–≤–∞—Ä–∏_–¥–∞–Ω–Ω—ã—Ö'
        if dict_folder.exists():
            dict_files = list(dict_folder.glob('*.md'))
            if not dict_files:
                self.warnings.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        samples_folder = data_section / '–≤—ã–±–æ—Ä–∫–∏_–∏_–ø—Ä–∏–º–µ—Ä—ã'
        if samples_folder.exists():
            sample_files = list(samples_folder.glob('*.csv')) + list(samples_folder.glob('*.json'))
            if not sample_files:
                self.suggestions.append("üí° –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è")
    
    def check_testing_coverage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        testing_section = self.project_path / '07_–ö–∞—á–µ—Å—Ç–≤–æ_–∏_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
        test_cases_folder = testing_section / '—Ç–µ—Å—Ç_–∫–µ–π—Å—ã'
        if test_cases_folder.exists():
            test_files = list(test_cases_folder.glob('*.md'))
            if len(test_files) < 2:  # –ú–µ–Ω—å—à–µ 2 —Ñ–∞–π–ª–æ–≤ (–≤–∫–ª—é—á–∞—è README)
                self.warnings.append("‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UAT —Å—Ü–µ–Ω–∞—Ä–∏–∏
        uat_folder = testing_section / '—Å—Ü–µ–Ω–∞—Ä–∏–∏_UAT'
        if uat_folder.exists():
            uat_files = list(uat_folder.glob('*.md'))
            if len(uat_files) < 2:
                self.suggestions.append("üí° –î–æ–±–∞–≤—å—Ç–µ UAT —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–µ–º–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def check_empty_folders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏"""
        empty_folders = []
        
        for item in self.project_path.rglob('*'):
            if item.is_dir() and not any(item.iterdir()):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
                if not any(part.startswith('.') for part in item.parts):
                    empty_folders.append(item.relative_to(self.project_path))
        
        if empty_folders:
            self.warnings.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(empty_folders)} –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫")
            for folder in empty_folders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                self.suggestions.append(f"üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞–ø–∫—É: {folder}")
    
    def check_documentation_links(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        readme_path = self.project_path / 'README.md'
        if readme_path.exists():
            content = readme_path.read_text(encoding='utf-8')
            
            # –ò—â–µ–º markdown —Å—Å—ã–ª–∫–∏
            links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
            broken_links = []
            
            for link_text, link_path in links:
                if link_path.startswith('http'):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                full_link_path = self.project_path / link_path
                if not full_link_path.exists():
                    broken_links.append(f"{link_text} -> {link_path}")
            
            if broken_links:
                self.warnings.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(broken_links)} –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ README")
    
    def calculate_score(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        score = 100
        
        # –°–Ω–∏–º–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        score -= len(self.issues) * 10  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        score -= len(self.warnings) * 5  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –±–∞–ª–ª
        
        return max(0, score)
    
    def get_quality_level(self, score):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞"""
        if score >= 90:
            return "üèÜ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif score >= 70:
            return "‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif score >= 50:
            return "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        else:
            return "‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞: {self.project_path.name}")
        print("=" * 50)
        
        self.check_required_files()
        self.check_file_freshness()
        self.check_content_quality()
        self.check_data_documentation()
        self.check_testing_coverage()
        self.check_empty_folders()
        self.check_documentation_links()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        score = self.calculate_score()
        quality_level = self.get_quality_level(score)
        
        return {
            'score': score,
            'quality_level': quality_level,
            'issues': self.issues,
            'warnings': self.warnings,
            'suggestions': self.suggestions
        }


def generate_quality_report(project_path: Path, results: dict):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    report = f"""# üîç –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_path.name}

**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M')}  
**–û–±—â–∏–π –±–∞–ª–ª:** {results['score']}/100  
**–£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞:** {results['quality_level']}

## üìä –°–≤–æ–¥–∫–∞

- ‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(results['issues'])}
- ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(results['warnings'])}  
- üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(results['suggestions'])}

"""

    if results['issues']:
        report += "## ‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
        for issue in results['issues']:
            report += f"- {issue}\n"
        report += "\n"
    
    if results['warnings']:
        report += "## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\n"
        for warning in results['warnings']:
            report += f"- {warning}\n"
        report += "\n"
    
    if results['suggestions']:
        report += "## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
        for suggestion in results['suggestions']:
            report += f"- {suggestion}\n"
        report += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    report += "## üéØ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π\n\n"
    
    if results['score'] < 50:
        report += """### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
3. –î–æ–±–∞–≤—å—Ç–µ –±–∞–∑–æ–≤—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 1-2 –¥–Ω—è
"""
    elif results['score'] < 70:
        report += """### –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è:
1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
3. –£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
4. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
"""
    elif results['score'] < 90:
        report += """### –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏:
1. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
2. –û–±–Ω–æ–≤–∏—Ç–µ —É—Å—Ç–∞—Ä–µ–≤—à—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
3. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""
    else:
        report += """### –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ
–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
1. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
2. –°–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
3. –°–æ–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã
"""
    
    report += f"""
---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*  
*–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: `python scripts/quality_check.py --project {project_path.name}`*
"""
    
    return report


def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--project', type=str, help='–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É')
    parser.add_argument('--all', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã')
    parser.add_argument('--save-report', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    if args.project:
        project_path = Path(args.project)
        if not project_path.exists():
            print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
            return
        
        checker = QualityChecker(project_path)
        results = checker.run_all_checks()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {results['quality_level']}")
        print(f"üìä –ë–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {results['score']}/100")
        
        if results['issues']:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ({len(results['issues'])}):")
            for issue in results['issues'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {issue}")
        
        if results['warnings']:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(results['warnings'])}):")
            for warning in results['warnings'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {warning}")
        
        if results['suggestions']:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(results['suggestions'])}):")
            for suggestion in results['suggestions'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  {suggestion}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        if args.save_report:
            report = generate_quality_report(project_path, results)
            report_path = project_path / f"QUALITY_REPORT_{datetime.now().strftime('%Y%m%d')}.md"
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    elif args.all:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = []
        for item in Path('.').iterdir():
            if item.is_dir() and not item.name.startswith('.') and not item.name == 'scripts':
                if (item / '00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ').exists():
                    projects.append(item)
        
        if not projects:
            print("‚ùå –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤:\n")
        
        for project in projects:
            checker = QualityChecker(project)
            results = checker.run_all_checks()
            print(f"üìÅ {project.name}: {results['score']}/100 - {results['quality_level']}")
    
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ --project –∏–ª–∏ --all")


if __name__ == '__main__':
    main()
