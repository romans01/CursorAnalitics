#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
"""

import argparse
import shutil
from pathlib import Path
import os


def remove_directory(path: Path) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    try:
        if path.exists() and path.is_dir():
            shutil.rmtree(path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path}")
            return True
        else:
            print(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        return False


def list_analytics_projects(base_path: Path) -> list:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∞–ø–∫–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã"""
    projects = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    patterns = [
        "*–ü—Ä–æ–µ–∫—Ç*",
        "*–ø—Ä–æ–µ–∫—Ç*", 
        "*–®–∞–±–ª–æ–Ω*",
        "*—à–∞–±–ª–æ–Ω*",
        "*Template*",
        "*template*"
    ]
    
    for pattern in patterns:
        for path in base_path.glob(pattern):
            if path.is_dir():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø–∞–ø–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                has_admin = (path / "00_–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ").exists()
                has_requirements = (path / "02_–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è").exists()
                has_cursor = (path / ".cursor").exists()
                
                if has_admin or has_requirements or has_cursor:
                    projects.append(path)
    
    return sorted(set(projects))


def main():
    parser = argparse.ArgumentParser(
        description='–û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤'
    )
    parser.add_argument(
        '--path', '-p',
        default='.',
        help='–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)'
    )
    parser.add_argument(
        '--project-name', '-n',
        help='–ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
    )
    parser.add_argument(
        '--all',
        action='store_true',
        help='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å'
    )
    parser.add_argument(
        '--force',
        action='store_true',
        help='–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    base_path = Path(args.path).resolve()
    
    if not base_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {base_path}")
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if args.project_name:
        project_path = base_path / args.project_name
        if args.dry_run:
            print(f"üîç –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {project_path}")
        else:
            if args.force or input(f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç '{args.project_name}'? (y/N): ").lower() == 'y':
                remove_directory(project_path)
        return
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects = list_analytics_projects(base_path)
    
    if not projects:
        print("‚ú® –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(projects)} –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:")
    for i, project in enumerate(projects, 1):
        print(f"  {i}. {project.name}")
    
    if args.dry_run:
        print("\nüîç Dry run: —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
        return
    
    if args.all:
        if args.force or input(f"\n–£–¥–∞–ª–∏—Ç—å –≤—Å–µ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤? (y/N): ").lower() == 'y':
            removed_count = 0
            for project in projects:
                if remove_directory(project):
                    removed_count += 1
            print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {removed_count}/{len(projects)}")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
        while True:
            try:
                choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(projects)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ")
                if choice.lower() == 'q':
                    break
                
                idx = int(choice) - 1
                if 0 <= idx < len(projects):
                    project = projects[idx]
                    if input(f"–£–¥–∞–ª–∏—Ç—å '{project.name}'? (y/N): ").lower() == 'y':
                        if remove_directory(project):
                            projects.pop(idx)
                            if not projects:
                                print("‚ú® –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
                                break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except (ValueError, KeyboardInterrupt):
                print("\nüëã –í—ã—Ö–æ–¥")
                break


if __name__ == '__main__':
    main()
