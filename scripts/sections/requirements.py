#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pathlib import Path

def write_text_file(path: Path, content: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)

def create_section(root: Path, as_template: bool = False) -> None:
    section_path = root / '02_Требования'
    (section_path / 'пользовательские_истории').mkdir(parents=True, exist_ok=True)
    
    content = "# Детальные требования с примерами" if as_template else "# Требования проекта"
    write_text_file(section_path / 'видение.md', f"{content}\n\nОписание видения решения.")
    write_text_file(section_path / 'глоссарий.md', f"{content}\n\nТермины и определения.")
    write_text_file(section_path / 'BRD_бизнес_требования.md', f"{content}\n\nБизнес-требования.")
    write_text_file(section_path / 'SRS_системные_требования.md', f"{content}\n\nСистемные требования.")
    write_text_file(section_path / 'критерии_приемки.md', f"{content}\n\nКритерии приемки.")
    write_text_file(section_path / 'трассируемость_требований.md', f"{content}\n\nМатрица трассируемости.")
    # Добавляем примеры для пользовательских историй
    if as_template:
        write_text_file(section_path / 'пользовательские_истории/README.md', """# Пользовательские истории

## Назначение
User Stories описывают функциональность с точки зрения пользователя в формате:  
**"Как [роль], я хочу [действие], чтобы [цель]"**

## Структура папки
- `epic_[название].md` — эпики (крупные функциональности)
- `story_[номер].md` — отдельные пользовательские истории
- `acceptance_criteria.md` — детальные критерии приемки
- `story_mapping.md` — карта пользовательских историй

## Шаблон пользовательской истории

### US-001: [Краткое название]

**Как** [роль пользователя]  
**Я хочу** [действие/функциональность]  
**Чтобы** [бизнес-ценность/цель]

**Приоритет:** Высокий/Средний/Низкий  
**Оценка:** [Story Points]  
**Эпик:** [Название эпика]

#### Критерии приемки
- [ ] Критерий 1: конкретное поведение системы
- [ ] Критерий 2: конкретное поведение системы
- [ ] Критерий 3: конкретное поведение системы

#### Определение готовности (Definition of Done)
- [ ] Код написан и протестирован
- [ ] Unit тесты покрывают функциональность
- [ ] Интеграционные тесты пройдены
- [ ] Документация обновлена
- [ ] Код ревью проведено
- [ ] UAT пройден заказчиком

#### Зависимости
- Зависит от: [US-XXX]
- Блокирует: [US-YYY]

#### Примечания
Дополнительная информация, ограничения, технические детали.
""")
        
        write_text_file(section_path / 'пользовательские_истории/epic_reporting.md', """# Эпик: Система отчетности

## Описание
Создание системы автоматической генерации и распространения отчетов для различных ролей пользователей.

## Бизнес-цель
Сократить время подготовки отчетов с 8 часов до 30 минут, повысить точность данных до 99%.

## Пользовательские истории

### US-001: Просмотр дашборда продаж
**Как** менеджер по продажам  
**Я хочу** видеть дашборд с ключевыми метриками продаж  
**Чтобы** быстро оценивать текущую ситуацию и принимать решения

**Приоритет:** Высокий  
**Оценка:** 8 SP

### US-002: Настройка автоматических отчетов
**Как** руководитель отдела  
**Я хочу** настроить автоматическую отправку еженедельных отчетов  
**Чтобы** получать актуальную информацию без ручных запросов

**Приоритет:** Средний  
**Оценка:** 5 SP

### US-003: Экспорт данных
**Как** аналитик  
**Я хочу** экспортировать данные из отчетов в Excel  
**Чтобы** проводить дополнительный анализ

**Приоритет:** Средний  
**Оценка:** 3 SP

### US-004: Фильтрация по периодам
**Как** любой пользователь системы  
**Я хочу** фильтровать отчеты по различным временным периодам  
**Чтобы** анализировать динамику показателей

**Приоритет:** Высокий  
**Оценка:** 5 SP

## Критерии приемки эпика
- [ ] Все пользовательские истории эпика реализованы
- [ ] Система генерирует отчеты автоматически
- [ ] Время подготовки отчета не превышает 2 минут
- [ ] Точность данных составляет 99%
- [ ] Пользователи прошли обучение и могут работать самостоятельно

## Метрики успеха
- Сокращение времени подготовки отчетов: с 8 часов до 30 минут
- Увеличение частоты использования отчетов: на 300%
- Снижение количества ошибок в отчетах: до 1%
- Удовлетворенность пользователей: 4.5/5
""")
        
        write_text_file(section_path / 'пользовательские_истории/story_001.md', """# US-001: Просмотр дашборда продаж

## Описание истории
**Как** менеджер по продажам  
**Я хочу** видеть дашборд с ключевыми метриками продаж в реальном времени  
**Чтобы** быстро оценивать текущую ситуацию и принимать оперативные решения

## Детали
**Приоритет:** Высокий  
**Оценка:** 8 Story Points  
**Эпик:** Система отчетности  
**Спринт:** 1

## Критерии приемки

### Функциональные требования
- [ ] Дашборд отображает выручку за текущий месяц
- [ ] Показывается процент выполнения плана продаж
- [ ] Отображается количество новых клиентов за неделю
- [ ] Показывается топ-5 продуктов по продажам
- [ ] Данные обновляются каждые 15 минут
- [ ] Доступна фильтрация по регионам
- [ ] Возможность переключения между месячным и квартальным видом

### Нефункциональные требования
- [ ] Дашборд загружается не более чем за 3 секунды
- [ ] Интерфейс адаптивен для планшетов
- [ ] Данные корректно отображаются в браузерах Chrome, Firefox, Edge

### UI/UX требования
- [ ] Использованы корпоративные цвета компании
- [ ] Ключевые метрики выделены крупным шрифтом
- [ ] Графики интерактивны (tooltip при наведении)
- [ ] Есть индикаторы загрузки данных

## Определение готовности (DoD)
- [ ] Код соответствует стандартам кодирования
- [ ] Unit тесты написаны и проходят (покрытие > 80%)
- [ ] Интеграционные тесты с источниками данных пройдены
- [ ] UI тесты автоматизированы
- [ ] Проведен код ревью
- [ ] Документация API обновлена
- [ ] Менеджер по продажам провел UAT и подтвердил соответствие

## Зависимости
- **Зависит от:** Настройка подключения к CRM системе
- **Блокирует:** US-002 (Настройка автоматических отчетов)

## Тестовые сценарии

### Позитивные сценарии
1. **Успешная загрузка дашборда**
   - Пользователь авторизован как менеджер по продажам
   - Открывает страницу дашборда
   - Ожидается: все виджеты загружаются и отображают актуальные данные

2. **Фильтрация по региону**
   - На дашборде выбирает регион "Москва"
   - Ожидается: данные обновляются и показывают только московские продажи

### Негативные сценарии
1. **Недоступность источника данных**
   - CRM система недоступна
   - Ожидается: показывается сообщение об ошибке с предложением обновить страницу

2. **Неавторизованный доступ**
   - Пользователь без роли "менеджер по продажам" пытается открыть дашборд
   - Ожидается: редирект на страницу с сообщением о недостаточных правах

## Примечания
- Дизайн макетов находится в Figma: [ссылка]
- API документация: [ссылка]
- Для демо использовать тестовые данные за последние 3 месяца
""")
    else:
        write_text_file(section_path / 'пользовательские_истории/README.md', """# Пользовательские истории

Здесь размещаются:
- Эпики (крупные функциональности)
- User Stories в формате "Как [роль], я хочу [действие], чтобы [цель]"
- Критерии приемки для каждой истории
- Карта пользовательских историй (Story Map)
""")
    
    print(f"✅ Создан раздел: 02_Требования ({'с примерами' if as_template else 'базовый'})")
