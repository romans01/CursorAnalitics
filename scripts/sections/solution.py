#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pathlib import Path

def write_text_file(path: Path, content: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)

def create_section(root: Path, as_template: bool = False) -> None:
    section_path = root / '05_Решение_и_дизайн'
    
    for subdir in ['архитектура', 'макеты_и_прототипы', 'протоколы_интеграций']:
        (section_path / subdir).mkdir(parents=True, exist_ok=True)
    
    if as_template:
        write_text_file(section_path / 'спецификации_API.md', """# Спецификации API

## REST API Endpoints

### GET /api/v1/analytics/reports
**Описание:** Получение списка доступных отчетов
**Параметры:**
- `category` (optional): категория отчетов
- `limit` (optional): количество записей (по умолчанию 20)

**Ответ:**
```json
{
  "reports": [
    {
      "id": "sales_summary",
      "name": "Сводка по продажам",
      "category": "sales",
      "updated_at": "2024-01-15T10:30:00Z"
    }
  ],
  "total": 15
}
```

### POST /api/v1/analytics/reports/{id}/generate
**Описание:** Генерация отчета
**Параметры пути:**
- `id`: идентификатор отчета

**Тело запроса:**
```json
{
  "date_from": "2024-01-01",
  "date_to": "2024-01-31",
  "filters": {
    "region": ["Moscow", "SPb"]
  }
}
```

## Коды ошибок
- `400`: Некорректные параметры запроса
- `401`: Требуется аутентификация  
- `403`: Недостаточно прав доступа
- `404`: Ресурс не найден
- `500`: Внутренняя ошибка сервера

## Аутентификация
Используется Bearer Token в заголовке Authorization:
```
Authorization: Bearer <token>
```
""")
        
        write_text_file(section_path / 'протоколы_интеграций/integration_example.md', """# Пример протокола интеграции

## Интеграция с CRM системой

### Общая информация
- **Система:** Salesforce CRM
- **Тип интеграции:** REST API
- **Частота синхронизации:** Каждые 15 минут
- **Направление:** Двусторонний обмен

### Синхронизируемые сущности

#### Клиенты (Customers)
**Направление:** CRM → DWH
**Маппинг полей:**
| CRM поле | DWH поле | Тип | Обязательное |
|----------|----------|-----|--------------|
| Account.Id | customer_id | string | Да |
| Account.Name | customer_name | string | Да |
| Account.Industry | industry_code | string | Нет |

#### Сделки (Deals)  
**Направление:** CRM → DWH
**Фильтры:** Только закрытые сделки за последние 2 года

### Обработка ошибок
- **Retry policy:** 3 попытки с экспоненциальной задержкой
- **Timeout:** 30 секунд на запрос
- **Логирование:** Все запросы и ответы в audit log
- **Уведомления:** Email при критичных ошибках

### Мониторинг
- **Метрики:** количество обработанных записей, время выполнения
- **Алерты:** при отсутствии данных > 1 часа
- **Dashboard:** статус интеграций в реальном времени
""")
        
    else:
        write_text_file(section_path / 'спецификации_API.md', """# Спецификации API

## Описание интерфейсов
Контракты, схемы данных, примеры запросов/ответов.

## Версионирование
Подход к версионированию API.

## Аутентификация
Методы аутентификации и авторизации.
""")
    
    write_text_file(section_path / 'правила_бизнес_логики.md', """# Правила бизнес-логики

## Бизнес-правила

### БП-01: [Название правила]
**Описание:** Формулировка правила
**Условия применения:** Когда действует
**Исключения:** Когда не применяется
**Источник:** Откуда взято правило

## Алгоритмы расчетов
Формулы и логика вычислений.

## Справочники
Источники справочной информации.
""")
    
    # Добавляем примеры для пустых папок
    if as_template:
        # Примеры архитектуры
        write_text_file(section_path / 'архитектура/README.md', """# Архитектурная документация

## Назначение
Документирование архитектурных решений, диаграмм системы и технических спецификаций.

## Типы артефактов

### Диаграммы архитектуры
- `system_architecture.drawio` — общая архитектура системы
- `data_architecture.drawio` — архитектура данных
- `integration_architecture.drawio` — схема интеграций
- `deployment_diagram.drawio` — диаграмма развертывания

### Архитектурные решения
- `adr_[номер]_[название].md` — Architecture Decision Records
- `technology_stack.md` — выбор технологий
- `security_architecture.md` — архитектура безопасности
- `scalability_plan.md` — план масштабирования

### Технические спецификации
- `database_schema.sql` — схема базы данных
- `api_contracts.yaml` — контракты API (OpenAPI)
- `message_formats.json` — форматы сообщений
- `configuration_schema.json` — схема конфигурации

## Шаблон ADR (Architecture Decision Record)

### ADR-001: [Название решения]

**Статус:** Предложено | Принято | Отклонено | Устарело  
**Дата:** YYYY-MM-DD  
**Авторы:** [ФИО]

#### Контекст
Описание ситуации, которая требует принятия архитектурного решения.

#### Решение
Архитектурное решение, которое мы принимаем.

#### Обоснование
Почему именно это решение выбрано.

#### Альтернативы
Какие другие варианты рассматривались и почему отклонены.

#### Последствия
Положительные и отрицательные последствия решения.

#### Связанные решения
Ссылки на связанные ADR.
""")
        
        write_text_file(section_path / 'архитектура/system_overview.md', """# Обзор архитектуры системы

## Высокоуровневая архитектура

```mermaid
graph TB
    Users[Пользователи] --> LB[Load Balancer]
    LB --> API[API Gateway]
    API --> Auth[Authentication Service]
    API --> App[Application Services]
    App --> DB[(Database)]
    App --> Cache[(Redis Cache)]
    App --> Queue[Message Queue]
    Queue --> Workers[Background Workers]
    Workers --> ExtAPI[External APIs]
```

## Компоненты системы

### Фронтенд
- **Технология:** React.js / Vue.js
- **Назначение:** Пользовательский интерфейс
- **Особенности:** SPA, responsive design

### API Gateway
- **Технология:** Kong / AWS API Gateway
- **Назначение:** Единая точка входа для всех API
- **Функции:** 
  - Маршрутизация запросов
  - Аутентификация и авторизация
  - Rate limiting
  - Логирование и мониторинг

### Application Services
- **Технология:** Python FastAPI / Node.js Express
- **Архитектурный стиль:** Microservices
- **Сервисы:**
  - User Service (управление пользователями)
  - Analytics Service (аналитика)
  - Reporting Service (отчеты)
  - Notification Service (уведомления)

### База данных
- **Основная БД:** PostgreSQL (OLTP)
- **Аналитическая БД:** ClickHouse (OLAP)
- **Кеш:** Redis
- **Поиск:** Elasticsearch

### Message Queue
- **Технология:** RabbitMQ / Apache Kafka
- **Назначение:** Асинхронная обработка задач
- **Паттерны:** Pub/Sub, Work Queues

## Принципы архитектуры

### Scalability (Масштабируемость)
- Горизонтальное масштабирование сервисов
- Шардинг базы данных по необходимости
- CDN для статических ресурсов

### Reliability (Надежность)
- Circuit Breaker паттерн
- Retry механизмы с exponential backoff
- Health checks для всех сервисов
- Graceful shutdown

### Security (Безопасность)
- OAuth 2.0 / JWT токены
- HTTPS везде
- Rate limiting
- Input validation
- SQL injection protection

### Observability (Наблюдаемость)
- Structured logging (JSON)
- Distributed tracing (Jaeger)
- Metrics collection (Prometheus)
- Error tracking (Sentry)

## Deployment

### Контейнеризация
- Docker для всех сервисов
- Multi-stage builds
- Минимальные base images (Alpine)

### Оркестрация
- Kubernetes для production
- Docker Compose для development
- Helm charts для развертывания

### CI/CD Pipeline
1. Code commit → Git webhook
2. Run tests (unit, integration)
3. Build Docker images
4. Security scanning
5. Deploy to staging
6. Run E2E tests
7. Deploy to production (blue-green)

## Мониторинг и алертинг

### Метрики
- **Business metrics:** конверсия, выручка, активные пользователи
- **Application metrics:** response time, throughput, error rate
- **Infrastructure metrics:** CPU, memory, disk, network

### Алерты
- **Critical:** система недоступна, потеря данных
- **Warning:** высокая нагрузка, медленные запросы
- **Info:** деплой завершен, плановые работы

## Планы развития

### Краткосрочные (3 месяца)
- [ ] Внедрение мониторинга производительности
- [ ] Оптимизация запросов к БД
- [ ] Добавление кеширования

### Среднесрочные (6 месяцев)
- [ ] Миграция на микросервисы
- [ ] Внедрение event-driven архитектуры
- [ ] Автоматизация тестирования

### Долгосрочные (12 месяцев)
- [ ] Переход на cloud-native архитектуру
- [ ] Внедрение machine learning pipeline
- [ ] Международная экспансия (multi-region)
""")
        
        # Примеры макетов и прототипов
        write_text_file(section_path / 'макеты_и_прототипы/README.md', """# Макеты и прототипы

## Назначение
Визуальные макеты интерфейсов, прототипы взаимодействия и UX/UI документация.

## Типы артефактов

### UI/UX Макеты
- `wireframes/` — каркасы интерфейсов (низкая детализация)
- `mockups/` — детализированные макеты (высокая детализация)
- `prototypes/` — интерактивные прототипы
- `style_guide.md` — руководство по стилю

### Пользовательские сценарии
- `user_journeys/` — карты пользовательских путей
- `user_personas.md` — персоны пользователей
- `usability_tests/` — результаты юзабилити-тестов

### Дизайн-система
- `design_tokens.json` — дизайн-токены (цвета, шрифты, отступы)
- `component_library/` — библиотека компонентов
- `accessibility_guidelines.md` — требования доступности

## Структура макетов

### По типам экранов
```
wireframes/
├── desktop/
│   ├── dashboard.png
│   ├── reports.png
│   └── settings.png
├── mobile/
│   ├── dashboard_mobile.png
│   └── menu_mobile.png
└── tablet/
    └── dashboard_tablet.png
```

### По пользовательским сценариям
```
user_journeys/
├── new_user_onboarding/
├── report_creation/
├── data_analysis/
└── admin_panel/
```

## Инструменты дизайна

### Для создания макетов
- **Figma** — основной инструмент для UI/UX
- **Sketch** — альтернатива для macOS
- **Adobe XD** — прототипирование
- **InVision** — интерактивные прототипы

### Для диаграмм UX
- **Miro** — пользовательские пути
- **Whimsical** — wireframes и flowcharts
- **Draw.io** — бесплатные диаграммы

### Для тестирования
- **Maze** — удаленное юзабилити-тестирование
- **Hotjar** — heatmaps и записи сессий
- **UserTesting** — качественные исследования

## Шаблон описания макета

### Экран: [Название экрана]

**Тип устройства:** Desktop / Mobile / Tablet  
**Роль пользователя:** [Администратор/Пользователь/Гость]  
**Сценарий использования:** [Краткое описание]

#### Элементы интерфейса
- **Header:** логотип, навигация, профиль пользователя
- **Sidebar:** основное меню, фильтры
- **Main content:** основной контент экрана
- **Footer:** дополнительная информация, ссылки

#### Интерактивные элементы
- **Кнопки:** [список кнопок и их действий]
- **Формы:** [поля ввода и валидация]
- **Модальные окна:** [когда появляются]
- **Уведомления:** [типы и расположение]

#### Состояния экрана
- **Loading:** индикаторы загрузки
- **Empty state:** когда нет данных
- **Error state:** обработка ошибок
- **Success state:** успешные действия

## Требования к доступности (A11Y)

### WCAG 2.1 Guidelines
- **Уровень AA** — минимальный требуемый уровень
- **Контрастность:** минимум 4.5:1 для обычного текста
- **Размер текста:** минимум 16px для основного контента
- **Навигация с клавиатуры:** все интерактивные элементы

### Тестирование доступности
- **Автоматические тесты:** axe-core, Lighthouse
- **Ручное тестирование:** screen readers, keyboard navigation
- **Инструменты:** WAVE, Color Oracle

## Процесс создания макетов

### 1. Исследование (Research)
- [ ] Анализ конкурентов
- [ ] Интервью с пользователями
- [ ] Анализ существующих данных

### 2. Концептуализация (Ideation)
- [ ] Brainstorming сессии
- [ ] Создание user personas
- [ ] Определение user journeys

### 3. Wireframing
- [ ] Низкоуровневые каркасы
- [ ] Определение информационной архитектуры
- [ ] Валидация с заинтересованными сторонами

### 4. Детализация (High-fidelity)
- [ ] Визуальный дизайн
- [ ] Интерактивные прототипы
- [ ] Дизайн-система

### 5. Тестирование и итерации
- [ ] Юзабилити-тестирование
- [ ] A/B тестирование дизайна
- [ ] Сбор обратной связи и доработки

## Чек-лист готовности макета

### Перед передачей в разработку
- [ ] Макеты созданы для всех основных экранов
- [ ] Учтены все состояния (loading, error, empty)
- [ ] Определены все интерактивные элементы
- [ ] Соблюдены принципы дизайн-системы
- [ ] Проведено юзабилити-тестирование
- [ ] Получены комментарии от заинтересованных сторон
- [ ] Создана техническая спецификация для разработчиков
""")
    else:
        # Базовые описания
        write_text_file(section_path / 'архитектура/README.md', """# Архитектура системы

Здесь размещаются:
- Диаграммы архитектуры системы
- Architecture Decision Records (ADR)
- Технические спецификации
- Схемы баз данных и интеграций
""")
        
        write_text_file(section_path / 'макеты_и_прототипы/README.md', """# Макеты и прототипы

Здесь размещаются:
- UI/UX макеты интерфейсов
- Интерактивные прототипы
- Wireframes и mockups
- Руководства по стилю и дизайн-системе
""")
    
    print(f"✅ Создан раздел: 05_Решение_и_дизайн ({'с примерами' if as_template else 'базовый'})")
