#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pathlib import Path

def write_text_file(path: Path, content: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)

def create_section(root: Path, as_template: bool = False) -> None:
    section_path = root / '07_Качество_и_тестирование'
    
    for subdir in ['тест_кейсы', 'сценарии_UAT', 'отчеты_валидации']:
        (section_path / subdir).mkdir(parents=True, exist_ok=True)
    
    content = "# План тестирования" if not as_template else """# План тестирования

## 1. Цели и задачи
Обеспечить качество решения и соответствие требованиям.

## 2. Объем тестирования
- Функциональное тестирование всех модулей
- Интеграционное тестирование с внешними системами  
- Нагрузочное тестирование критичных компонентов
- Тестирование безопасности

## 3. Стратегия тестирования
- Unit тесты: 80% покрытие кода
- Интеграционные тесты: все API endpoints
- E2E тесты: критичные пользовательские сценарии
- Ручное тестирование: UI/UX, edge cases

## 4. Критерии входа/выхода
**Критерии входа:**
- [ ] Среда тестирования готова
- [ ] Тестовые данные подготовлены
- [ ] Сборка успешно развернута

**Критерии выхода:**
- [ ] 100% критичных тестов пройдены
- [ ] Нет блокирующих дефектов
- [ ] UAT успешно завершен
"""
    
    write_text_file(section_path / 'план_тестирования.md', content)
    
    # Добавляем примеры для пустых папок
    if as_template:
        # Тест-кейсы
        write_text_file(section_path / 'тест_кейсы/README.md', """# Тест-кейсы

## Назначение
Детализированные сценарии тестирования для проверки функциональности, производительности и безопасности системы.

## Типы тест-кейсов

### Функциональные тесты
- `functional_tests/` — проверка основных функций системы
- `integration_tests/` — тестирование взаимодействия компонентов
- `api_tests/` — тестирование программных интерфейсов
- `ui_tests/` — тестирование пользовательского интерфейса

### Нефункциональные тесты
- `performance_tests/` — тесты производительности
- `security_tests/` — тесты безопасности
- `usability_tests/` — тесты удобства использования
- `compatibility_tests/` — тесты совместимости

### Специальные тесты
- `regression_tests/` — регрессионное тестирование
- `smoke_tests/` — дымовое тестирование
- `load_tests/` — нагрузочное тестирование
- `accessibility_tests/` — тесты доступности

## Структура тест-кейса

### Базовая информация
- **ID тест-кейса:** TC-001
- **Название:** Краткое описание тестируемой функции
- **Модуль/Компонент:** Часть системы
- **Приоритет:** Критический/Высокий/Средний/Низкий
- **Тип:** Функциональный/Нефункциональный
- **Автор:** ФИО тестировщика
- **Дата создания:** YYYY-MM-DD

### Предварительные условия
- Состояние системы перед тестом
- Необходимые данные и настройки
- Права доступа пользователя
- Конфигурация окружения

### Шаги выполнения
1. **Действие 1:** Детальное описание действия
   - **Ожидаемый результат:** Что должно произойти
   
2. **Действие 2:** Следующее действие
   - **Ожидаемый результат:** Ожидаемая реакция системы

### Критерии прохождения
- Четкие условия успешного выполнения теста
- Проверяемые элементы интерфейса
- Ожидаемые значения и сообщения

### Тестовые данные
- Входные данные для теста
- Граничные значения
- Некорректные данные (для негативных тестов)

## Шаблоны тест-кейсов

### Функциональный тест-кейс
**ID:** TC-AUTH-001  
**Название:** Успешная авторизация пользователя  
**Модуль:** Аутентификация  
**Приоритет:** Критический  
**Автор:** [ФИО]

**Предварительные условия:**
- Пользователь зарегистрирован в системе
- Пользователь находится на странице входа
- База данных содержит валидные учетные данные

**Шаги выполнения:**
1. Ввести корректный email в поле "Email"
   - **Ожидаемый результат:** Поле принимает ввод, нет сообщений об ошибке

2. Ввести корректный пароль в поле "Пароль"
   - **Ожидаемый результат:** Символы пароля маскируются звездочками

3. Нажать кнопку "Войти"
   - **Ожидаемый результат:** Происходит переход на главную страницу системы

4. Проверить отображение имени пользователя в шапке
   - **Ожидаемый результат:** В правом верхнем углу отображается имя пользователя

**Критерии прохождения:**
- [ ] Пользователь успешно авторизован
- [ ] Произошел переход на главную страницу
- [ ] Отображается персонализированный интерфейс
- [ ] В логах зафиксирован успешный вход

**Тестовые данные:**
- Email: test.user@company.com
- Пароль: TestPassword123!

### Негативный тест-кейс
**ID:** TC-AUTH-002  
**Название:** Авторизация с некорректными данными  
**Модуль:** Аутентификация  
**Приоритет:** Высокий

**Предварительные условия:**
- Пользователь находится на странице входа

**Шаги выполнения:**
1. Ввести некорректный email
2. Ввести некорректный пароль
3. Нажать кнопку "Войти"

**Ожидаемый результат:**
- Отображается сообщение об ошибке "Неверные учетные данные"
- Пользователь остается на странице входа
- Поля ввода очищаются или сохраняют введенные данные (согласно требованиям)

**Тестовые данные:**
- Email: wrong@email.com
- Пароль: wrongpassword

## Организация тест-кейсов

### По функциональным областям
```
тест_кейсы/
├── authentication/
│   ├── TC-AUTH-001_successful_login.md
│   ├── TC-AUTH-002_invalid_credentials.md
│   └── TC-AUTH-003_password_reset.md
├── user_management/
├── reporting/
└── data_processing/
```

### По типам тестирования
```
тест_кейсы/
├── functional/
├── performance/
├── security/
├── usability/
└── integration/
```

## Инструменты для управления тест-кейсами

### Test Management Systems
- **TestRail** — профессиональная система управления тестами
- **Zephyr** — интеграция с Jira
- **qTest** — корпоративная платформа тестирования
- **TestLink** — open source решение

### Автоматизация тестирования
- **Selenium** — автоматизация веб-интерфейсов
- **Postman/Newman** — тестирование API
- **JMeter** — нагрузочное тестирование
- **Cypress** — современная автоматизация E2E тестов

## Метрики качества тест-кейсов

### Покрытие тестами
- **Функциональное покрытие:** % протестированных функций
- **Покрытие кода:** % протестированного кода
- **Покрытие требований:** % требований с тест-кейсами
- **Покрытие рисков:** % выявленных рисков с тестами

### Качество тест-кейсов
- **Четкость:** понятность шагов и ожидаемых результатов
- **Полнота:** достаточность для выявления дефектов
- **Повторяемость:** возможность воспроизведения результатов
- **Актуальность:** соответствие текущей версии системы

## Процесс создания тест-кейсов

### 1. Анализ требований
- [ ] Изучение функциональных требований
- [ ] Выявление тестируемых сценариев
- [ ] Определение критериев приемки
- [ ] Анализ пользовательских историй

### 2. Планирование тестов
- [ ] Определение стратегии тестирования
- [ ] Выбор типов тестов
- [ ] Планирование тестовых данных
- [ ] Оценка трудозатрат

### 3. Написание тест-кейсов
- [ ] Создание детальных шагов
- [ ] Определение ожидаемых результатов
- [ ] Подготовка тестовых данных
- [ ] Указание предварительных условий

### 4. Ревью и утверждение
- [ ] Проверка коллегами
- [ ] Валидация с требованиями
- [ ] Утверждение заинтересованными сторонами
- [ ] Внесение в систему управления тестами

### 5. Выполнение и поддержка
- [ ] Выполнение тест-кейсов
- [ ] Фиксация результатов
- [ ] Обновление при изменениях в системе
- [ ] Анализ эффективности тестов

## Чек-лист качественного тест-кейса

### Структура
- [ ] Уникальный и понятный ID
- [ ] Описательное название
- [ ] Четко указаны предварительные условия
- [ ] Шаги выполнения детализированы
- [ ] Ожидаемые результаты конкретны

### Содержание
- [ ] Тест проверяет конкретное требование
- [ ] Шаги логически связаны
- [ ] Результаты измеримы и проверяемы
- [ ] Указаны необходимые тестовые данные
- [ ] Учтены граничные случаи

### Качество
- [ ] Тест может выполнить любой тестировщик
- [ ] Результат однозначно интерпретируется
- [ ] Тест не зависит от других тест-кейсов
- [ ] Время выполнения разумно
- [ ] Тест актуален для текущей версии системы
""")
        
        # Сценарии UAT
        write_text_file(section_path / 'сценарии_UAT/README.md', """# Сценарии пользовательского приемочного тестирования (UAT)

## Назначение
User Acceptance Testing (UAT) — финальная стадия тестирования, где реальные пользователи проверяют соответствие системы их потребностям и бизнес-требованиям.

## Цели UAT

### Бизнес-цели
- Подтверждение соответствия бизнес-требованиям
- Проверка пользовательского опыта
- Валидация рабочих процессов
- Готовность к промышленной эксплуатации

### Технические цели
- Проверка производительности в реальных условиях
- Валидация интеграций с существующими системами
- Тестирование безопасности с реальными данными
- Проверка процедур резервного копирования и восстановления

## Типы UAT

### Alpha Testing
- **Исполнители:** Внутренние пользователи компании
- **Среда:** Тестовое окружение
- **Цель:** Выявление основных проблем до beta-тестирования
- **Длительность:** 1-2 недели

### Beta Testing
- **Исполнители:** Ограниченная группа внешних пользователей
- **Среда:** Производственно-подобное окружение
- **Цель:** Проверка готовности к широкому развертыванию
- **Длительность:** 2-4 недели

### Business Acceptance Testing (BAT)
- **Исполнители:** Ключевые заинтересованные стороны
- **Среда:** Производственное окружение
- **Цель:** Формальное подтверждение готовности к внедрению
- **Длительность:** 1 неделя

## Структура UAT сценария

### Информация о сценарии
- **ID сценария:** UAT-001
- **Название:** Описательное название бизнес-процесса
- **Бизнес-процесс:** Связанный рабочий процесс
- **Роль пользователя:** Кто выполняет сценарий
- **Приоритет:** Критический/Высокий/Средний/Низкий
- **Продолжительность:** Ожидаемое время выполнения

### Бизнес-контекст
- **Цель:** Зачем выполняется данный процесс
- **Частота использования:** Как часто выполняется в реальной работе
- **Зависимости:** От каких других процессов зависит
- **Критичность:** Влияние на бизнес при недоступности

### Предварительные условия
- Состояние системы и данных
- Необходимые права доступа
- Подготовленные тестовые данные
- Конфигурация интеграций

### Шаги выполнения
Каждый шаг включает:
- **Действие пользователя:** Что делает пользователь
- **Ожидаемый результат:** Что должно произойти
- **Бизнес-ценность:** Почему этот шаг важен
- **Критерии успеха:** Как понять, что шаг выполнен правильно

### Критерии приемки
- Функциональные критерии
- Критерии производительности
- Критерии удобства использования
- Критерии надежности

## Шаблон UAT сценария

### UAT-001: Создание и отправка еженедельного отчета

**Роль пользователя:** Менеджер по продажам  
**Бизнес-процесс:** Еженедельная отчетность  
**Приоритет:** Критический  
**Продолжительность:** 15-20 минут

#### Бизнес-контекст
**Цель:** Создать и отправить еженедельный отчет по продажам руководству  
**Частота:** Каждый понедельник утром  
**Критичность:** Высокая — отчет используется для принятия стратегических решений

#### Предварительные условия
- Пользователь авторизован как менеджер по продажам
- В системе есть данные о продажах за прошедшую неделю
- Настроены получатели отчета
- Доступно подключение к интернету

#### Сценарий выполнения

**Шаг 1: Вход в модуль отчетности**
- **Действие:** Открыть раздел "Отчеты" в главном меню
- **Ожидаемый результат:** Открывается страница со списком доступных отчетов
- **Критерий успеха:** Страница загружается за 3 секунды, отображается список отчетов

**Шаг 2: Выбор шаблона отчета**
- **Действие:** Выбрать "Еженедельный отчет по продажам"
- **Ожидаемый результат:** Открывается конструктор отчета с предзаполненными параметрами
- **Критерий успеха:** Период автоматически установлен на прошедшую неделю

**Шаг 3: Настройка параметров**
- **Действие:** Проверить и при необходимости скорректировать период и фильтры
- **Ожидаемый результат:** Параметры корректно отображаются и изменяются
- **Критерий успеха:** Все изменения сохраняются и применяются к данным

**Шаг 4: Генерация отчета**
- **Действие:** Нажать кнопку "Сгенерировать отчет"
- **Ожидаемый результат:** Система создает отчет с актуальными данными
- **Критерий успеха:** Отчет генерируется за 30 секунд, содержит корректные данные

**Шаг 5: Проверка содержимого**
- **Действие:** Просмотреть сгенерированный отчет
- **Ожидаемый результат:** Отчет содержит все необходимые разделы и метрики
- **Критерий успеха:** Данные соответствуют ожиданиям, графики корректно отображаются

**Шаг 6: Отправка отчета**
- **Действие:** Нажать "Отправить" и выбрать получателей
- **Ожидаемый результат:** Отчет отправляется указанным получателям
- **Критерий успеха:** Получено подтверждение об отправке, получатели получают отчет

#### Критерии приемки
- [ ] Отчет создается за время не более 1 минуты
- [ ] Все данные в отчете актуальны и корректны
- [ ] Отчет отправляется всем указанным получателям
- [ ] Интерфейс интуитивно понятен и не требует дополнительного обучения
- [ ] Система сохраняет историю отправленных отчетов

#### Возможные проблемы и решения
- **Проблема:** Медленная генерация отчета
  - **Решение:** Оптимизировать запросы к базе данных
- **Проблема:** Неточные данные
  - **Решение:** Проверить синхронизацию с источниками данных

## Организация UAT

### Планирование UAT
- [ ] Определение участников тестирования
- [ ] Подготовка тестового окружения
- [ ] Создание тестовых данных
- [ ] Планирование расписания тестирования

### Подготовка участников
- [ ] Обучение пользователей процессу UAT
- [ ] Предоставление доступов к системе
- [ ] Распределение ролей и ответственности
- [ ] Подготовка документации и инструкций

### Выполнение UAT
- [ ] Ежедневные stand-up встречи
- [ ] Фиксация найденных проблем
- [ ] Регулярная коммуникация с командой разработки
- [ ] Отслеживание прогресса выполнения сценариев

### Завершение UAT
- [ ] Анализ результатов тестирования
- [ ] Принятие решения о готовности к внедрению
- [ ] Документирование уроков и рекомендаций
- [ ] Планирование поддержки после внедрения

## Критерии завершения UAT

### Функциональные критерии
- 100% критических сценариев пройдены успешно
- 95% высокоприоритетных сценариев пройдены успешно
- Все критические дефекты исправлены
- Производительность соответствует требованиям

### Пользовательские критерии
- Пользователи подтверждают удобство использования
- Бизнес-процессы выполняются эффективно
- Пользователи готовы работать с системой самостоятельно
- Получена положительная обратная связь от ключевых пользователей

### Готовность к внедрению
- Техническая инфраструктура готова
- Процедуры поддержки настроены
- Пользователи обучены
- План внедрения утвержден

## Инструменты для UAT

### Управление тестированием
- **TestRail** — управление тест-кейсами и результатами
- **Zephyr** — интеграция с Jira для отслеживания дефектов
- **Azure DevOps** — комплексное управление проектом

### Коммуникация и сотрудничество
- **Slack/Microsoft Teams** — ежедневная коммуникация
- **Confluence** — документирование процессов и результатов
- **Miro** — визуализация процессов и проблем

### Сбор обратной связи
- **UserVoice** — сбор предложений пользователей
- **Hotjar** — анализ поведения пользователей
- **SurveyMonkey** — опросы удовлетворенности
""")
        
        # Отчеты валидации
        write_text_file(section_path / 'отчеты_валидации/README.md', """# Отчеты валидации

## Назначение
Документирование результатов проверки соответствия системы требованиям, стандартам качества и ожиданиям пользователей.

## Типы отчетов валидации

### Функциональная валидация
- `functional_validation_report.md` — проверка соответствия функциональным требованиям
- `business_process_validation.md` — валидация бизнес-процессов
- `integration_validation.md` — проверка интеграций между системами
- `data_validation_report.md` — валидация корректности данных

### Нефункциональная валидация
- `performance_validation.md` — проверка производительности
- `security_validation.md` — валидация требований безопасности
- `usability_validation.md` — проверка удобства использования
- `compatibility_validation.md` — валидация совместимости

### Регуляторная валидация
- `compliance_validation.md` — соответствие нормативным требованиям
- `audit_validation_report.md` — результаты аудиторских проверок
- `gdpr_compliance_report.md` — соответствие требованиям GDPR
- `sox_compliance_report.md` — соответствие SOX требованиям

## Структура отчета валидации

### Общая информация
- **Название проекта/системы:** [Название]
- **Версия системы:** [Версия]
- **Дата валидации:** [Дата начала] - [Дата окончания]
- **Ответственный за валидацию:** [ФИО и роль]
- **Участники валидации:** [Список участников]
- **Тип валидации:** [Функциональная/Нефункциональная/Регуляторная]

### Исполнительное резюме
- **Общий статус:** Пройдено/Не пройдено/Условно пройдено
- **Ключевые выводы:** 3-5 основных результатов
- **Критические проблемы:** Проблемы, блокирующие внедрение
- **Рекомендации:** Конкретные действия для устранения проблем

### Область валидации
- **Функциональные области:** Что проверялось
- **Границы валидации:** Что включено/исключено
- **Критерии приемки:** По каким критериям оценивалось соответствие
- **Методология:** Как проводилась валидация

### Результаты валидации
- **Пройденные проверки:** Список успешных тестов
- **Не пройденные проверки:** Список неуспешных тестов
- **Выявленные дефекты:** Классификация по критичности
- **Метрики качества:** Количественные показатели

### Анализ рисков
- **Выявленные риски:** Потенциальные проблемы
- **Оценка влияния:** Критичность каждого риска
- **Планы митигации:** Способы снижения рисков
- **Остаточные риски:** Неустранимые риски

## Шаблон отчета функциональной валидации

### Отчет о функциональной валидации системы управления проектами

**Проект:** Система управления проектами v2.0  
**Дата валидации:** 15-22 сентября 2024  
**Валидатор:** Иванов И.И., Ведущий аналитик  
**Статус:** Условно пройдено

#### Исполнительное резюме

**Общий результат:** Система прошла функциональную валидацию с минорными замечаниями. Выявлено 3 критических, 7 высоких и 12 средних дефектов. Критические дефекты должны быть устранены до внедрения.

**Ключевые выводы:**
1. Основная функциональность работает согласно требованиям
2. Интеграция с внешними системами требует доработки
3. Производительность соответствует требованиям
4. Пользовательский интерфейс интуитивно понятен

**Критические проблемы:**
- Потеря данных при синхронизации с CRM системой
- Некорректный расчет бюджета проекта при изменении валюты
- Отсутствие валидации при создании задач с дублирующимися именами

#### Область валидации

**Проверенные функциональные области:**
- [ ] ✅ Управление пользователями и ролями
- [ ] ✅ Создание и редактирование проектов
- [ ] ⚠️ Управление задачами (с замечаниями)
- [ ] ❌ Интеграция с внешними системами (критические проблемы)
- [ ] ✅ Отчетность и аналитика
- [ ] ✅ Уведомления и коммуникации

**Критерии приемки:**
- Все функции работают согласно техническим требованиям
- Время отклика не превышает 3 секунд для 95% запросов
- Система обрабатывает до 1000 одновременных пользователей
- Интеграции работают без потери данных

#### Детальные результаты

**Управление проектами**
- ✅ Создание проекта: 15/15 тест-кейсов пройдено
- ✅ Редактирование проекта: 12/12 тест-кейсов пройдено
- ⚠️ Удаление проекта: 8/10 тест-кейсов пройдено (2 минорных дефекта)

**Управление задачами**
- ✅ Создание задач: 20/25 тест-кейсов пройдено
- ❌ Назначение ресурсов: 15/20 тест-кейсов пройдено (критический дефект)
- ✅ Отслеживание прогресса: 10/10 тест-кейсов пройдено

**Интеграции**
- ❌ Синхронизация с CRM: 5/15 тест-кейсов пройдено (критические проблемы)
- ⚠️ Интеграция с календарем: 12/15 тест-кейсов пройдено
- ✅ Экспорт в Excel: 8/8 тест-кейсов пройдено

#### Выявленные дефекты

**Критические (3):**
1. **DEF-001:** Потеря данных при синхронизации с CRM
   - **Описание:** При синхронизации контактов теряется 10-15% записей
   - **Влияние:** Критическое - потеря бизнес-данных
   - **Статус:** Открыт

2. **DEF-002:** Некорректный расчет бюджета при смене валюты
   - **Описание:** Система не пересчитывает бюджет при изменении валюты проекта
   - **Влияние:** Критическое - неточная финансовая отчетность
   - **Статус:** Открыт

3. **DEF-003:** Отсутствие валидации дублирующихся задач
   - **Описание:** Можно создать задачи с одинаковыми именами в рамках проекта
   - **Влияние:** Критическое - путаница в управлении задачами
   - **Статус:** Открыт

**Высокие (7):**
- DEF-004: Медленная загрузка больших проектов (>500 задач)
- DEF-005: Некорректное отображение диаграммы Ганта в IE11
- DEF-006: Отсутствие уведомлений о просроченных задачах
- [и другие...]

#### Рекомендации

**Немедленные действия (до внедрения):**
1. Исправить критические дефекты DEF-001, DEF-002, DEF-003
2. Провести дополнительное тестирование интеграций
3. Оптимизировать производительность для больших проектов

**Краткосрочные действия (первый месяц после внедрения):**
1. Исправить высокоприоритетные дефекты
2. Улучшить пользовательский интерфейс
3. Добавить дополнительные валидации

**Долгосрочные действия (3-6 месяцев):**
1. Расширить функциональность интеграций
2. Добавить мобильное приложение
3. Улучшить аналитические возможности

#### Заключение

Система готова к внедрению после устранения критических дефектов. Рекомендуется провести повторную валидацию исправлений перед промышленным запуском.

**Подпись валидатора:** _________________  
**Дата:** 22 сентября 2024

## Процесс создания отчетов валидации

### Планирование валидации
- [ ] Определение области и критериев валидации
- [ ] Подготовка тестовых сценариев и данных
- [ ] Формирование команды валидации
- [ ] Планирование расписания и ресурсов

### Выполнение валидации
- [ ] Проведение тестирования согласно плану
- [ ] Документирование результатов в реальном времени
- [ ] Классификация и приоритизация дефектов
- [ ] Координация с командой разработки

### Анализ результатов
- [ ] Анализ соответствия критериям приемки
- [ ] Оценка рисков и их влияния
- [ ] Формулирование рекомендаций
- [ ] Принятие решения о готовности системы

### Документирование и коммуникация
- [ ] Подготовка итогового отчета
- [ ] Презентация результатов заинтересованным сторонам
- [ ] Планирование исправлений и повторной валидации
- [ ] Архивирование документации валидации

## Инструменты для валидации

### Управление процессом
- **Jira** — отслеживание дефектов и задач
- **TestRail** — управление тест-кейсами
- **Confluence** — документирование процессов

### Автоматизация тестирования
- **Selenium** — автоматизация UI тестов
- **Postman** — тестирование API
- **JMeter** — нагрузочное тестирование

### Анализ и отчетность
- **Tableau** — визуализация результатов
- **Excel/Google Sheets** — анализ метрик
- **Power BI** — дашборды качества

## Метрики валидации

### Покрытие тестированием
- Процент покрытых требований: [X%]
- Количество выполненных тест-кейсов: [X из Y]
- Процент автоматизированных тестов: [X%]

### Качество системы
- Плотность дефектов: [X дефектов на 1000 строк кода]
- Процент критических дефектов: [X%]
- Время на исправление дефектов: [X часов в среднем]

### Эффективность процесса
- Время валидации: [X дней]
- Стоимость валидации: [X рублей]
- Количество участников: [X человек]
""")
    else:
        # Базовые описания
        write_text_file(section_path / 'тест_кейсы/README.md', """# Тест-кейсы

Здесь размещаются:
- Детализированные сценарии тестирования
- Функциональные и нефункциональные тесты
- Тестовые данные и ожидаемые результаты
- Автоматизированные тесты
""")
        
        write_text_file(section_path / 'сценарии_UAT/README.md', """# Сценарии UAT

Здесь размещаются:
- Пользовательские приемочные тесты
- Бизнес-сценарии тестирования
- Критерии приемки от пользователей
- Результаты UAT тестирования
""")
        
        write_text_file(section_path / 'отчеты_валидации/README.md', """# Отчеты валидации

Здесь размещаются:
- Отчеты о результатах тестирования
- Валидация соответствия требованиям
- Анализ качества системы
- Рекомендации по улучшению
""")
    
    print(f"✅ Создан раздел: 07_Качество_и_тестирование ({'с примерами' if as_template else 'базовый'})")
