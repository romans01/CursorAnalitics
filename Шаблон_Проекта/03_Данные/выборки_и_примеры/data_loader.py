#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import json
from pathlib import Path
from typing import Dict, Any


class DataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, data_dir: str = '.'):
        self.data_dir = Path(data_dir)
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        config_path = self.data_dir / 'data_config.json'
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    
    def load_customers(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        file_path = self.data_dir / 'sample_customers.csv'
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        df = pd.read_csv(file_path)
        df['registration_date'] = pd.to_datetime(df['registration_date'])
        return df
    
    def load_sales(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂"""
        file_path = self.data_dir / 'sample_sales.csv'
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        df = pd.read_csv(file_path)
        df['order_date'] = pd.to_datetime(df['order_date'])
        df['price'] = pd.to_numeric(df['price'])
        return df
    
    def validate_data(self) -> Dict[str, list]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        errors = {'customers': [], 'sales': []}
        
        try:
            customers = self.load_customers()
            sales = self.load_sales()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            if customers['customer_id'].duplicated().any():
                errors['customers'].append('–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è customer_id')
            
            if customers['email'].duplicated().any():
                errors['customers'].append('–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂
            if sales['order_id'].duplicated().any():
                errors['sales'].append('–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è order_id')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            missing_customers = set(sales['customer_id']) - set(customers['customer_id'])
            if missing_customers:
                errors['sales'].append(f'–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {missing_customers}')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
            if (sales['price'] <= 0).any():
                errors['sales'].append('–ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã <= 0')
            
            if (sales['quantity'] <= 0).any():
                errors['sales'].append('–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ <= 0')
                
        except Exception as e:
            errors['general'] = [f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}']
        
        return errors
    
    def get_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            customers = self.load_customers()
            sales = self.load_sales()
            
            return {
                'customers': {
                    'count': len(customers),
                    'date_range': {
                        'from': customers['registration_date'].min().strftime('%Y-%m-%d'),
                        'to': customers['registration_date'].max().strftime('%Y-%m-%d')
                    },
                    'status_distribution': customers['status'].value_counts().to_dict()
                },
                'sales': {
                    'count': len(sales),
                    'date_range': {
                        'from': sales['order_date'].min().strftime('%Y-%m-%d'),
                        'to': sales['order_date'].max().strftime('%Y-%m-%d')
                    },
                    'total_revenue': float(sales['price'].sum()),
                    'avg_order_value': float(sales['price'].mean())
                }
            }
        except Exception as e:
            return {'error': str(e)}


if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    loader = DataLoader()
    
    print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º:")
    summary = loader.get_summary()
    print(json.dumps(summary, indent=2, ensure_ascii=False))
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    errors = loader.validate_data()
    for table, table_errors in errors.items():
        if table_errors:
            print(f"‚ùå {table}: {'; '.join(table_errors)}")
        else:
            print(f"‚úÖ {table}: –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
